name: Log GitHub Traffic

on:
  schedule:
    - cron: '0 2 * * *' # runs daily at 02:00 UTC
  workflow_dispatch: # allows manual runs

jobs:
  track-traffic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install requests

      - name: Fetch and store traffic data
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          # Create a Python script file
          cat > fetch_traffic.py << 'EOF'
          import os
          import json
          import datetime
          import requests

          headers = {
              "Authorization": f"token {os.environ['GH_PAT']}",
              "Accept": "application/vnd.github+json"
          }

          repo = os.environ["REPO"]
          today = datetime.date.today().isoformat()
          base_url = f"https://api.github.com/repos/{repo}/traffic"

          def fetch(endpoint):
              r = requests.get(f"{base_url}/{endpoint}", headers=headers)
              r.raise_for_status()
              return r.json()

          data = {
              "date": today,
              "views": fetch("views"),
              "clones": fetch("clones")
          }

          os.makedirs("traffic_logs", exist_ok=True)
          with open(f"traffic_logs/{today}.json", "w") as f:
              json.dump(data, f, indent=2)

          # Create a summary file for email
          with open("traffic_summary.txt", "w") as f:
              f.write(f"GitHub Traffic Report for {repo} - {today}\n")
              f.write("=" * 50 + "\n\n")

              # Views summary
              views = data["views"]
              f.write(f"VIEWS (Last 14 days):\n")
              f.write(f"Total views: {views['count']}\n")
              f.write(f"Unique visitors: {views['uniques']}\n\n")

              f.write("Daily breakdown:\n")
              for day in views["views"]:
                  f.write(f"  {day['timestamp'][:10]}: {day['count']} views from {day['uniques']} unique visitors\n")
              f.write("\n")

              # Clones summary
              clones = data["clones"]
              f.write(f"CLONES (Last 14 days):\n")
              f.write(f"Total clones: {clones['count']}\n")
              f.write(f"Unique cloners: {clones['uniques']}\n\n")

              f.write("Daily breakdown:\n")
              for day in clones["clones"]:
                  f.write(f"  {day['timestamp'][:10]}: {day['count']} clones from {day['uniques']} unique users\n")

          EOF

          # Execute the Python script
          python fetch_traffic.py

      - name: Archive logs to private repository
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          MAIN_REPO: ${{ github.repository }}
          ARCHIVE_REPO: ${{ github.repository_owner }}/lpx_links-traffic-logs
        run: |
          # Configure Git identity for the traffic bot
          git config --global user.email "traffic@example.com"
          git config --global user.name "Traffic Bot"
          
          # Clone the private archive repository
          echo "Cloning private archive repository..."
          git clone https://x-access-token:${GH_PAT}@github.com/${ARCHIVE_REPO}.git archive-repo
          
          # Create directories if they don't exist
          mkdir -p archive-repo/traffic_logs
          
          # Copy the traffic logs and summary to the archive repository
          cp -r traffic_logs/* archive-repo/traffic_logs/
          cp traffic_summary.txt archive-repo/
          
          # Commit and push the changes to the private repository
          cd archive-repo
          git add traffic_logs traffic_summary.txt
          git commit -m "Add traffic data for $(date +%F) from ${MAIN_REPO}" || echo "No changes to commit"
          git push

      # Email notification or other notification methods could be added here if needed in the future
      # The traffic data is now only stored in the private repository
